<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Lateral Thunking</title><link>http://brianbaquiran.com/</link><description>Random thoughts and stories</description><atom:link href="http://brianbaquiran.com/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 27 Apr 2017 10:10:38 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Google Cloud Natural Language API</title><link>http://brianbaquiran.com/posts/google-cloud-natural-language-api/</link><dc:creator>Brian</dc:creator><description>&lt;a class="reference external image-reference" href="http://brianbaquiran.com/images/gdgph_nlapi.png"&gt;&lt;img alt="/images/gdgph_nlapi.thumbnail.png" src="http://brianbaquiran.com/images/gdgph_nlapi.thumbnail.png"&gt;&lt;/a&gt;</description><category>api</category><category>google</category><category>NLP</category><guid>http://brianbaquiran.com/posts/google-cloud-natural-language-api/</guid><pubDate>Thu, 27 Apr 2017 10:05:21 GMT</pubDate></item><item><title>Life Satisfaction, Two Cohorts</title><link>http://brianbaquiran.com/posts/life-satisfaction-two-cohorts/</link><dc:creator>Brian</dc:creator><description>&lt;div&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Make sure your kids see this graph &lt;a href="https://t.co/WEZiSmzfcR"&gt;https://t.co/WEZiSmzfcR&lt;/a&gt; &lt;a href="https://t.co/pqHGoUinZz"&gt;pic.twitter.com/pqHGoUinZz&lt;/a&gt;&lt;/p&gt;— Jeff Atwood (@codinghorror) &lt;a href="https://twitter.com/codinghorror/status/852311991981035520"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;</description><category>graphs</category><category>twitter</category><guid>http://brianbaquiran.com/posts/life-satisfaction-two-cohorts/</guid><pubDate>Thu, 13 Apr 2017 13:27:09 GMT</pubDate></item><item><title>AI PH Mixer</title><link>http://brianbaquiran.com/posts/ai-ph-mixer/</link><dc:creator>Brian</dc:creator><description>&lt;a class="reference external image-reference" href="http://brianbaquiran.com/images/ai_ph.jpg"&gt;&lt;img alt="/images/ai_ph.thumbnail.jpg" src="http://brianbaquiran.com/images/ai_ph.thumbnail.jpg"&gt;&lt;/a&gt;</description><category>AI</category><guid>http://brianbaquiran.com/posts/ai-ph-mixer/</guid><pubDate>Tue, 14 Mar 2017 09:49:02 GMT</pubDate></item><item><title>Disabling/Enabling the Asus UX303 Touchscreen in Ubuntu 16.04</title><link>http://brianbaquiran.com/posts/disablingenabling-the-asus-ux303-touchscreen/</link><dc:creator>Brian</dc:creator><description>&lt;div&gt;&lt;p&gt;Find the Atmel touchscreen device:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ xinput --list
⎡ Virtual core pointer                        id=2    [master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer                      id=4    [slave  pointer  (2)]
⎜   ↳ FocalTechPS/2 FocalTech FocalTech Touchpad      id=17   [slave  pointer  (2)]
⎜   ↳ Logitech USB Optical Mouse                      id=20   [slave  pointer  (2)]
⎜   ↳ Atmel                                           id=10   [slave  pointer  (2)]
⎣ Virtual core keyboard                       id=3    [master keyboard (2)]
    ↳ Virtual core XTEST keyboard                     id=5    [slave  keyboard (3)]
    ↳ Power Button                                    id=6    [slave  keyboard (3)]
    ↳ Sleep Button                                    id=9    [slave  keyboard (3)]
    ↳ USB2.0 UVC HD Webcam                            id=13   [slave  keyboard (3)]
    ↳ Video Bus                                       id=7    [slave  keyboard (3)]
    ↳ AT Translated Set 2 keyboard                    id=16   [slave  keyboard (3)]
    ↳ Video Bus                                       id=8    [slave  keyboard (3)]
    ↳ Asus WMI hotkeys                                id=15   [slave  keyboard (3)]
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Atmel&lt;/tt&gt; device is our touchscreen.&lt;/p&gt;
&lt;p&gt;Use the &lt;tt class="docutils literal"&gt;xinput disable&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;enable&lt;/tt&gt; commands to turn the touchscreen off or on again.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ xinput disable Atmel
$ xinput enable Atmel
&lt;/pre&gt;
&lt;p&gt;Both commands are silent, unless you specify a device that doesn't exist.&lt;/p&gt;&lt;/div&gt;</description><category>asus</category><category>linux</category><guid>http://brianbaquiran.com/posts/disablingenabling-the-asus-ux303-touchscreen/</guid><pubDate>Wed, 07 Dec 2016 06:20:23 GMT</pubDate></item><item><title>Creating EC2 keypairs with AWS CLI</title><link>http://brianbaquiran.com/posts/creating-ec2-keypairs-with-aws-cli/</link><dc:creator>Brian</dc:creator><description>&lt;div&gt;&lt;p&gt;It is easy to create EC2 keypairs with the AWS CLI:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_c614b1d2edc8424aa33d139a1c07fc4b-1"&gt;&lt;/a&gt;$ aws ec2 create-key-pair --key-name mynewkeypair &amp;gt; keystuff.json
&lt;/pre&gt;&lt;p&gt;After creating the keypair it should appear in your EC2 key pairs listing. The
&lt;tt class="docutils literal"&gt;keystuff.json&lt;/tt&gt; file will contain the RSA private key you will need to use
to connect to any instances you create with the keypair, as well as the name of
the key and its fingerprint.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_90a280b24e524714b42cdf533d84d18a-1"&gt;&lt;/a&gt;{
&lt;a name="rest_code_90a280b24e524714b42cdf533d84d18a-2"&gt;&lt;/a&gt;    "KeyMaterial": "-----BEGIN RSA PRIVATE KEY-----\n&amp;lt;your private key&amp;gt;==\n-----END RSA PRIVATE KEY-----",
&lt;a name="rest_code_90a280b24e524714b42cdf533d84d18a-3"&gt;&lt;/a&gt;    "KeyName": "mynewkeypair",
&lt;a name="rest_code_90a280b24e524714b42cdf533d84d18a-4"&gt;&lt;/a&gt;    "KeyFingerprint": "53:47:ee:01:3a:35:9b:52:1c:4f:99:6f:87:b0:0f:8b:ed:83:55:3b"
&lt;a name="rest_code_90a280b24e524714b42cdf533d84d18a-5"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;p&gt;To extract the private key into a separate file, use the
&lt;a class="reference external" href="https://stedolan.github.io/jq/"&gt;jq JSON filter&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_e56394c463014b66a850afca9e8a2efc-1"&gt;&lt;/a&gt;$ jq &lt;span class="s1"&gt;'.KeyMaterial'&lt;/span&gt; keystuff.json --raw &amp;gt; mynewkey.pem
&lt;/pre&gt;&lt;/div&gt;</description><category>AWS</category><category>JSON</category><category>tips</category><guid>http://brianbaquiran.com/posts/creating-ec2-keypairs-with-aws-cli/</guid><pubDate>Thu, 29 Sep 2016 10:48:37 GMT</pubDate></item><item><title>GitLab Weirdness</title><link>http://brianbaquiran.com/posts/gitlab-weirdness/</link><dc:creator>Brian</dc:creator><description>&lt;div&gt;&lt;p&gt;If you're using GitLab.com for hosting your repositories, you may have encountered
a strange problem wherein your newly-created repository's dashboard doesn't update.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://brianbaquiran.com/images/gitlab-weirdness.png"&gt;&lt;img alt="/images/gitlab-weirdness.thumbnail.png" src="http://brianbaquiran.com/images/gitlab-weirdness.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;That is, when you &lt;cite&gt;git push&lt;/cite&gt; your changes to the repository, the interface still
looks like a newly-created repository, and neither your files nor your commits
are visible in the web UI. This is weird because the remote repository works in
all other respects. You can push code up to it, clone it, etc. You just can't see
it on the GitLab website.&lt;/p&gt;
&lt;p&gt;I've seen this happen a couple of times, and so far I've found that the quick fix is to
run Housekeeping on the repository from the Edit Project page.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://brianbaquiran.com/images/gitlab-housekeeping.png"&gt;&lt;img alt="/images/gitlab-housekeeping.thumbnail.png" src="http://brianbaquiran.com/images/gitlab-housekeeping.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Housekeeping can take a couple of minutes but most of the time it works and you
can see your repository's files and commit history after running it. If it
doesn't work, you have to delete the repository in GitLab and re-create it,
pushing your code up again.&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>tips</category><guid>http://brianbaquiran.com/posts/gitlab-weirdness/</guid><pubDate>Wed, 28 Sep 2016 07:35:40 GMT</pubDate></item><item><title>Installing Python 2.7.11 on CentOS 7</title><link>http://brianbaquiran.com/posts/installing-python-2711-on-centos-7/</link><dc:creator>Brian</dc:creator><description>&lt;div&gt;&lt;p&gt;CentOS 7 ships with python 2.7.5 by default. We have some software that requires 2.7.11. It's generally a bad idea to clobber your system python, since other system-supplied software may rely on it being a particular version.&lt;/p&gt;
&lt;p&gt;Our strategy for running 2.7.11 alongside the system python is to build it from source, then create virtualenvs that will run our software.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://brianbaquiran.com/posts/installing-python-2711-on-centos-7/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>centos</category><category>linux</category><category>pydata</category><category>python</category><guid>http://brianbaquiran.com/posts/installing-python-2711-on-centos-7/</guid><pubDate>Mon, 23 May 2016 11:17:07 GMT</pubDate></item><item><title>The Business of Big Data Analytics Meetup #3</title><link>http://brianbaquiran.com/posts/the-business-of-big-data-analytics-meetup-3/</link><dc:creator>Brian</dc:creator><description>&lt;a class="reference external image-reference" href="http://brianbaquiran.com/images/meetup_business_of_big_data_analytics.jpg"&gt;&lt;img alt="/images/meetup_business_of_big_data_analytics.thumbnail.jpg" src="http://brianbaquiran.com/images/meetup_business_of_big_data_analytics.thumbnail.jpg"&gt;&lt;/a&gt;</description><guid>http://brianbaquiran.com/posts/the-business-of-big-data-analytics-meetup-3/</guid><pubDate>Thu, 11 Feb 2016 02:14:39 GMT</pubDate></item><item><title>namedtuple Comes in Handy</title><link>http://brianbaquiran.com/posts/namedtuple-comes-in-handy/</link><dc:creator>Brian</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been writing a lot of Python code recently. Oftentimes I struggle with what a method should return when I have to relay more than one value back to the caller. For example:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;PaymentGateway&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bill_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-3"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Perform some transaction against the API.&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        :return: whether the transaction was successful or not&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        :rtype: bool&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-9"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# stuff happens here&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx_details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Success: CODE=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; Details=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-13"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-14"&gt;&lt;/a&gt;        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;GatewayException&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-15"&gt;&lt;/a&gt;            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Transaction failed: ERROR=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; reason=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_dc2e9df3661f487ab8a937799cf450cc-16"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The code that calls &lt;code&gt;do_transaction&lt;/code&gt; might look like this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_e0f035243d044eb2adf69d8004b3a621-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;payment_gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bill_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;service_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ref_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_e0f035243d044eb2adf69d8004b3a621-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Hooray! Succe$$!&lt;/span&gt;
&lt;a name="rest_code_e0f035243d044eb2adf69d8004b3a621-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;report_success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Transaction for &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; was successful. Check logs for status code."&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;subid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e0f035243d044eb2adf69d8004b3a621-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_e0f035243d044eb2adf69d8004b3a621-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Boo&lt;/span&gt;
&lt;a name="rest_code_e0f035243d044eb2adf69d8004b3a621-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;report_failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Transaction failed. I don't know why..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Many times this is fine, but what if the caller needs the details from the &lt;code&gt;amount_transaction&lt;/code&gt; result or the &lt;code&gt;GatewayException&lt;/code&gt;? A quick solution is to return a &lt;code&gt;dict&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;PaymentGateway&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bill_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-3"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Perform some transaction against the API.&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        :return: a dict that contains keys 'success', 'code', and 'detail'&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        :rtype: dict&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-9"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# stuff happens here&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx_details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Success: CODE=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; Details=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;success_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-14"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-15"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-16"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'detail'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-17"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-18"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;success_dict&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-19"&gt;&lt;/a&gt;        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;GatewayException&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-20"&gt;&lt;/a&gt;            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Transaction failed: ERROR=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; reason=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-21"&gt;&lt;/a&gt;            &lt;span class="n"&gt;error_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-22"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-23"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-24"&gt;&lt;/a&gt;                &lt;span class="s1"&gt;'detail'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-25"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_0280e0b3bd1648f2b22e580747e6a0ac-26"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;error_dict&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;It works but it's pretty ad-hoc. The structure of whatever &lt;code&gt;do_transaction&lt;/code&gt; returns won't be obvious unless you dig into the code. The caller will end up like:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8b0f053ab4d24a74868cc5ea12213abb-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;payment_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payment_gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bill_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;service_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ref_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8b0f053ab4d24a74868cc5ea12213abb-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;payment_status&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8b0f053ab4d24a74868cc5ea12213abb-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Hooray! Succe$$!&lt;/span&gt;
&lt;a name="rest_code_8b0f053ab4d24a74868cc5ea12213abb-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;report_success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Transaction for &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; was successful, status code &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payment_status&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;a name="rest_code_8b0f053ab4d24a74868cc5ea12213abb-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8b0f053ab4d24a74868cc5ea12213abb-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Boo&lt;/span&gt;
&lt;a name="rest_code_8b0f053ab4d24a74868cc5ea12213abb-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;report_failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Transaction failed, because: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;payment_status&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'detail'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Now the caller is poluted with literal strings like &lt;code&gt;'success'&lt;/code&gt;, &lt;code&gt;'code'&lt;/code&gt; and &lt;code&gt;'status'&lt;/code&gt;. These can be hell to debug, specially if you happen to misspell one of them in your code. Even if you're using an awesome IDE like &lt;a class="reference external" href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An altenative to defining these ad-hoc dict structures is to use &lt;a class="reference external" href="https://docs.python.org/2/library/collections.html#collections.namedtuple"&gt;namedtuple&lt;/a&gt; from the collections package.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;PaymentStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PaymentStatus'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'detail'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;PaymentGateway&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bill_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-7"&gt;&lt;/a&gt;        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        Perform some transaction against the API.&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        :return: whether the transaction was successful or not&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-11"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        :rtype: PaymentStatus&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-12"&gt;&lt;/a&gt;&lt;span class="sd"&gt;        """&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-13"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;# stuff happens here&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-14"&gt;&lt;/a&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-15"&gt;&lt;/a&gt;            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx_details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Success: CODE=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; Details=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-17"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PaymentStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-18"&gt;&lt;/a&gt;        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;GatewayException&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-19"&gt;&lt;/a&gt;            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Transaction failed: ERROR=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; reason=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_dd2f1e7dd5024bcebdfd4d292c7a063a-20"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PaymentStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;namedtuple&lt;/code&gt; forces us to be explicit about what &lt;code&gt;do_transaction&lt;/code&gt; returns. And &lt;a class="reference external" href="http://www.thezenofpython.com/"&gt;explicit is better than implicit&lt;/a&gt;. For the caller, this looks like:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_1c519f7623fc4b67ae3c25fa71150227-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;payment_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payment_gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bill_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;service_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ref_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1c519f7623fc4b67ae3c25fa71150227-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;payment_status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_1c519f7623fc4b67ae3c25fa71150227-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Hooray! Succe$$!&lt;/span&gt;
&lt;a name="rest_code_1c519f7623fc4b67ae3c25fa71150227-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;report_success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Transaction for &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; was successful, status code &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payment_status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_1c519f7623fc4b67ae3c25fa71150227-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_1c519f7623fc4b67ae3c25fa71150227-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Boo&lt;/span&gt;
&lt;a name="rest_code_1c519f7623fc4b67ae3c25fa71150227-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;report_failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Transaction failed, because: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;payment_status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This is almost as simple as our first example, and is free of string literals. And if you're using PyCharm, you can take advantage of the code completion which will know about the attributes of your new &lt;code&gt;namedtuple&lt;/code&gt; class:&lt;/p&gt;
&lt;img alt="/images/pycharm_namedtuple.png" src="http://brianbaquiran.com/images/pycharm_namedtuple.png"&gt;
&lt;p&gt;So if your code is littered with string literals as keys for return values from methods that return &lt;code&gt;dict&lt;/code&gt;, consider having them return a &lt;code&gt;namedtuple&lt;/code&gt; instead.&lt;/p&gt;&lt;/div&gt;</description><category>coding</category><category>namedtuple</category><category>PyCharm</category><category>python</category><guid>http://brianbaquiran.com/posts/namedtuple-comes-in-handy/</guid><pubDate>Sun, 20 Dec 2015 00:58:42 GMT</pubDate></item><item><title>Tidy Aliens</title><link>http://brianbaquiran.com/posts/alien-employment-permit-dataset/</link><dc:creator>Brian</dc:creator><description>&lt;div&gt;&lt;a class="reference external image-reference" href="http://brianbaquiran.com/images/aliens.png"&gt;&lt;img alt="/images/aliens.thumbnail.png" src="http://brianbaquiran.com/images/aliens.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.ble.dole.gov.ph/"&gt;Bureau of Local Employment&lt;/a&gt; issues working permits to foreign nationals that want to work in the Philippines. Ever wondered which nationalities obtain the most permits? I used public data from the BLE in a &lt;a class="reference external" href="http://brianbaquiran.com/stories/tidying-alien-work-permit-dataset/"&gt;data cleanup and visualization exercise&lt;/a&gt; using R’s reshape, dplyr and ggplot2.&lt;/p&gt;&lt;/div&gt;</description><category>dplyr</category><category>ggplot2</category><category>R Language</category><category>visualization</category><guid>http://brianbaquiran.com/posts/alien-employment-permit-dataset/</guid><pubDate>Sun, 29 Nov 2015 01:40:54 GMT</pubDate></item></channel></rss>